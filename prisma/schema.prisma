generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkdayStatus {
  complete
  incomplete
  exceeded
}

model Workday {
  id           Int           @id @default(autoincrement())
  day          String
  time         String
  description  String
  title        String
  userAuthorId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tags         Tag[]
  todos        ToDo[]
  status       WorkdayStatus
  userAuthor   User?         @relation("Workdays", fields: [userAuthorId], references: [id])
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String?    @unique
  workdays  Workday[]
  tagColors TagColor[]
}

model TagColor {
  id     Int    @id @default(autoincrement())
  color  String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  tagId  Int
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([userId, tagId])
}

model ToDo {
  id        Int      @id @default(autoincrement())
  items     String[]
  workday   Workday? @relation(fields: [workdayId], references: [id])
  workdayId Int?     @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  workdays  Workday[]  @relation("Workdays")
  accounts  Account[]
  sessions  Session[]
  tagColors TagColor[]

  @@map("users")
}
